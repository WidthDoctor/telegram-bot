// npm run dev
const token = "7122702562:AAFcNto8K7YTBf3NOQhB51q5LRYImjZXLlM";
const fs = require("fs");
const telegramApi = require("node-telegram-bot-api");
const bot = new telegramApi(token, { polling: true });
const cheerio = require("cheerio");
const questions = require("./questions.json");
let language = "";
class NewBot {
  constructor() {
    this.usersBaseFilePath = "usersBase.json";
  }
  async currentCource(city, userId) {//! –Ω–∞–¥–æ –º–µ–Ω—è—Ç—å cityUrl –Ω–∞ –≥–æ—Ä–æ–¥–∞ —á—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–∞–º –∏–ª–∏ –Ω–∏—Ö—É—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    console.log(city+ '–ø—Ä–∏—à–µ–ª –≤ –≤–∞–ª—é—Ç–Ω–∏–∫');
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const cityURL = questions.cityURL[city];
    try {
      const fetchModule = await import("node-fetch");
      const fetch = fetchModule.default;
      const response = await fetch(cityURL);
      const html = await response.text();

      const $ = cheerio.load(html); // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å –ø–æ–º–æ—â—å—é Cheerio

      const currencyRates = {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç

      $("span.kurs").each((index, element) => {
        const id = $(element).attr("id");
        const content = $(element).text();

        // –†–∞–∑–¥–µ–ª—è–µ–º id –ø–æ —Å–∏–º–≤–æ–ª—É –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
        const [currencyId, exchangeType] = id.split("_");
        if (!currencyRates[currencyId]) {
          currencyRates[currencyId] = {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
        }
        currencyRates[currencyId][exchangeType] = content;
      });

      // console.log(currencyRates); //!JSON!
      this.sendCurrentRate(currencyRates, userId);
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  } //–∫—É—Ä—Å
  commands() {
    bot.on("message", (userInput) => {
      const text = userInput.text;
      const chatId = userInput.chat.id;
      const userLanguage = userInput.from.language_code;
      switch (text) {
        case "/start":
          // console.log(userInput.from.language_code);
          this.saveUser(userInput);
          this.gotoPrivateChat(userInput);
          break;

        default:
          break;
      }
    });
    bot.on("callback_query", (callbackQuery) => {
      // console.log(callbackQuery);
      const action = callbackQuery.data;
      console.log(action);
      // console.log(action);
      const chatId = callbackQuery.message.chat.id;
      const userId = callbackQuery.from.id;

      const usersBaseData = fs.readFileSync("usersBase.json");
      const usersBase = JSON.parse(usersBaseData);
      const user = usersBase.find((user) => user.userId === userId);

      const questionsData = fs.readFileSync("questions.json");
      const questions = JSON.parse(questionsData);
      const userLanguage = user.language;

      const messageCity = questions[userLanguage].city;
      const messageContactQuestion = questions[userLanguage].contactQuestion;
      const ALL_cities = questions.cities;
      // const questionAboutCity =
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è callback_data
      switch (action) {
        case "kurs":
          bot.sendMessage(userId, messageCity, {
            reply_markup: this.selectCity(userLanguage),
          });
          break;
        case "contact":
          bot.sendMessage(userId, messageContactQuestion, {
            reply_markup: this.selectCityForContact(),
          });
          break;
        case "actual":
          console.log(action, chatId);
          break;
        case "again":
          console.log(action, chatId);
          break;
        default:
          if (ALL_cities.includes(action)) {
            this.currentCource(action, userId);
            // const result = this.sendCurrentRate();
            // bot.sendMessage(userId,"actual kurs", {reply_markup: result});
          }
          if (ALL_cities.includes(action) + "Tel") {
            console.log(action);
            this.sendContactsForUser(action, userId);
          }
          break;
      }
    });
  }
  async gotoPrivateChat(userInput) {
    try {
      const userId = userInput.from.id;
      const chatId = userInput.chat.id;

      const usersBaseData = fs.readFileSync("usersBase.json");
      const usersBase = JSON.parse(usersBaseData);

      const user = usersBase.find((user) => user.userId === userId);

      if (!user) {
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      }

      const userLanguage = user.language;
      const questionsData = fs.readFileSync("questions.json");
      const questions = JSON.parse(questionsData);

      const startMessage = questions[userLanguage].start;
      const startMessageInBot = questions[userLanguage].startIn;
      if (userId === chatId) {
        await bot.sendMessage(userId, startMessageInBot, {
          reply_markup: this.kantorMenu(userLanguage),
        });
      }
      if (userId !== chatId) {
        await bot.sendMessage(userId, startMessage, {
          reply_markup: this.kantorMenu(userLanguage),
        });
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ gotoPrivateChat:", error);
    }
  }
  async saveUser(userInput) {
    try {
      const { first_name, last_name, username, id, language_code } =
        userInput.from;
      const userId = id;

      let usersBase = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª JSON –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      if (fs.existsSync(this.usersBaseFilePath)) {
        const usersBaseData = fs.readFileSync(this.usersBaseFilePath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç –ª–∏ —Ñ–∞–π–ª JSON
        if (usersBaseData.length > 0) {
          usersBase = JSON.parse(usersBaseData);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userId
      const existingUserIndex = usersBase.findIndex(
        (user) => user.userId === userId
      );
      if (existingUserIndex !== -1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = usersBase[existingUserIndex];
        const updatedUser = {
          username: username || first_name || last_name || "Unknown",
          userId,
          language: language_code,
        };

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (
          existingUser.username !== updatedUser.username ||
          existingUser.language !== updatedUser.language
        ) {
          usersBase[existingUserIndex] = updatedUser;

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª JSON
          fs.writeFileSync(
            this.usersBaseFilePath,
            JSON.stringify(usersBase, null, 2)
          );

          // console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
        } else {
          // console.log("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤
      usersBase.push({
        username: username || first_name || last_name || "Unknown",
        userId,
        language: language_code,
      });

      // –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON
      fs.writeFileSync(
        this.usersBaseFilePath,
        JSON.stringify(usersBase, null, 2)
      );

      // console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
  }
  sendCurrentRate(rate, userId) {
    const buttons = Object.entries(rate).map(([currency, rates]) => {
      let buttonLabel = "";
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã
      buttonLabel += this.getCountryEmoji(currency) + " " + currency;
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      if (rates.dk && rates.ds) {
        buttonLabel += ` ‚Äî    üíµ ${rates.dk} üí¥ ${rates.ds}`;
      }
      return [{ text: buttonLabel, callback_data: currency }];
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(userId, "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:", {
      reply_markup: JSON.stringify({ inline_keyboard: buttons }),
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
    console.log(JSON.stringify({ inline_keyboard: buttons }));
    return JSON.stringify({ inline_keyboard: buttons });
  }
  sendContactsForUser(action, userId) {
    console.log("—Å–æ—Å–∏ –ø–∏—Å—å–∫—É", action);
    switch (action) {
      case "KrakowTel":
        bot.sendContact(userId, "+1231231231", "Manager Krakow");

        break;
      case "WroclawTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "PrzemyslTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "GdanskTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "LodzTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "WarszawaTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "KrakowPKPTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "RzeszowTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "PoznanTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "LublinTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;
      case "SzczecinTel":
        bot.sendContact(userId, "+1234567890", "Don Perdole");

        break;

      default:
        break;
    }
  }
  kantorMenu(language) {
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const kursText = questions[language].options[0];
    const contactText = questions[language].options[1];
    const actualText = questions[language].options[2];
    const startOverText = questions[language].options[3];

    return {
      inline_keyboard: [
        [
          { text: kursText, callback_data: "kurs" },
          { text: contactText, callback_data: "contact" },
        ],
        [
          { text: actualText, callback_data: "actual" },
          { text: startOverText, callback_data: "again" },
        ],
      ],
    };
  }
  selectCity(userLanguage) {
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);

    const citiesData = questions.citiesLanguage;
    const cities = citiesData.map((cityObj) => cityObj[userLanguage]);

    const buttons = cities.map((city) => ({
      text: city,
      callback_data: city, // –∏–ª–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }));
    const ALL_cities = [].concat(
      ...citiesData.map((cityObj) => Object.values(cityObj))
    );
    console.log(ALL_cities);
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–∞—Å—Å–∏–≤—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∫–Ω–æ–ø–æ–∫
    const inlineKeyboard = [];
    for (let i = 0; i < buttons.length; i += 3) {
      inlineKeyboard.push(buttons.slice(i, i + 3));
    }
    return { inline_keyboard: inlineKeyboard };
  }

  selectCityForContact() { //! –∞ —Ç—É—Ç —Ö—É–π–Ω—è –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—É—Ç –ø—Ä–æ–ø–∏—Å–∞–Ω–æ —Ä—É—á–∫–∞–º–∏ –∏ –ø–æ—ç—Ç–æ–º—É –æ–Ω –Ω–µ –≤–¥—É–ø–ª—è–µ—Ç –≥–æ—Ä–æ–¥–∞ –Ω–æ–≤—ã–µ..
    return {
      inline_keyboard: [
        [
          { text: "Krakow", callback_data: "KrakowTel" },
          { text: "Wroclaw", callback_data: "WroclawTel" },
        ],
        [
          { text: "Przemysl", callback_data: "PrzemyslTel" },
          { text: "Gdansk", callback_data: "GdanskTel" },
        ],
        [
          { text: "Lodz", callback_data: "LodzTel" },
          { text: "Warszawa", callback_data: "WarszawaTel" },
        ],
        [
          { text: "KrakowPKP", callback_data: "KrakowPKPTel" },
          { text: "Rzeszow", callback_data: "RzeszowTel" },
        ],
        [
          { text: "Poznan", callback_data: "PoznanTel" },
          { text: "Lublin", callback_data: "LublinTel" },
        ],
        [{ text: "Szczecin", callback_data: "SzczecinTel" }],
      ],
    };
  }
  getCountryEmoji(countryCode) {
    // –ü—Ä–∏–º–µ—Ä—ã —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–æ–≤
    const flagEmojis = {
      EUR: "üá™üá∫",
      USD: "üá∫üá∏",
      GBP: "üá¨üáß",
      CHF: "üá®üá≠",
      ILS: "üáÆüá±",
      CNY: "üá®üá≥",
      TRY: "üáπüá∑",
      CAD: "üá®üá¶",
      AUD: "üá¶üá∫",
      NOK: "üá≥üá¥",
      SEK: "üá∏üá™",
      CZK: "üá®üáø",
      HUF: "üá≠üá∫",
      HKD: "üá≠üá∞",
      ISK: "üáÆüá∏",
      JPY: "üáØüáµ",
      AED: "üá¶üá™",
    };

    return flagEmojis[countryCode] || "";
  }
  // languageButtons() {
  //   return JSON.stringify({
  //     inline_keyboard: [
  //       [
  //         { text: "English", callback_data: "EN" },
  //         { text: "–†—É—Å—Å–∫–∏–π", callback_data: "RUS" },
  //       ],
  //       [
  //         { text: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data: "UKR" },
  //         { text: "Polska", callback_data: "PL" },
  //       ],
  //     ],
  //   });
  // } //? –ú–û–ñ–ï–¢ –ü–û–î –ß–¢–û-–¢–û –î–†–£–ì–û–ï –≠–¢–ò –ö–ù–û–ü–ö–ò –ü–û–ô–î–£–¢ –ö–ê–ö –®–ê–ë–õ–û–ù
}

const myBot = new NewBot(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
myBot.commands();
// myBot.cerrentCource();
