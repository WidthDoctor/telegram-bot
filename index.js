// npm run dev
//7525570494:AAHa7O4Riwznvo1wBQPDaFkFQbQ2bGfVQ3w
// 7335216321:AAHsftZsYkU12cvz6IjKUIX1z6MK3SY40ww —Ç–µ—Å—Ç–æ–≤—ã–π
// 7525570494:AAHa7O4Riwznvo1wBQPDaFkFQbQ2bGfVQ3w –ø—Ä–æ–¥–∞–∫—à–µ–Ω
const dotenv = require("dotenv").config();
const token = process.env.API_TOKEN;
const fs = require("fs");
const telegramApi = require("node-telegram-bot-api");
const bot = new telegramApi(token, { polling: true });
const cheerio = require("cheerio");
const questions = require("./questions.json");
const { url } = require("inspector");

let FLAGKURS = false;
let FLAGCONTACTS = false;
let FLAGADDRESS = false;
let language = "";
let kursToCalculate;

class NewBot {
  constructor() {
    this.usersBaseFilePath = "usersBase.json";
    bot.setMyCommands([
      { command: "/start", description: "Menu" },
      { command: "/language", description: "Change language" },
    ]);
  }

  async currentCource(city, userId) {
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const cityURL = questions.cityURL[city];
    try {
      const fetchModule = await import("node-fetch");
      const fetch = fetchModule.default;
      const response = await fetch(cityURL);
      const html = await response.text();

      const $ = cheerio.load(html); // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å –ø–æ–º–æ—â—å—é Cheerio

      const currencyRates = {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç

      $("span.kurs").each((index, element) => {
        const id = $(element).attr("id");
        const content = $(element).text();

        // –†–∞–∑–¥–µ–ª—è–µ–º id –ø–æ —Å–∏–º–≤–æ–ª—É –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
        const [currencyId, exchangeType] = id.split("_");
        if (!currencyRates[currencyId]) {
          currencyRates[currencyId] = {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
        }
        currencyRates[currencyId][exchangeType] = content;
      });
      console.log(currencyRates);
      this.sendCurrentRate(currencyRates, userId, city);
      kursToCalculate = currencyRates;
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    }
  } //–∫—É—Ä—Å
  commands() {
    bot.on('polling_error', (error) => {
      console.log('Polling error:', error);
    });
    bot.on("message", (msg) => {
      console.log(msg);

      const usersBaseData = fs.readFileSync("usersBase.json");
      const text = msg.text;
      // const chatId = userInput.from.id;
      const usersBase = JSON.parse(usersBaseData);
      const userId = msg.from.id;
      const user = usersBase.find((user) => user.userId === userId);

      if (msg.web_app_data) {
        const data = JSON.parse(msg.web_app_data.data);
        const summa = data.sum;
        const userId = msg.from.id;
        this.calculateSum(summa, userId);
      }
      if(msg.contact){
        const contact = msg.contact
        const language = user.language;
        this.orderBotButton(msg,contact,language)
      }
    });
    bot.on("message", (userInput) => {
      console.log(userInput);
      const usersBaseData = fs.readFileSync("usersBase.json");
      const text = userInput.text;
      // const chatId = userInput.from.id;
      const userId = userInput.from.id;
      const usersBase = JSON.parse(usersBaseData);
      const user = usersBase.find((user) => user.userId === userId);

      switch (text) {
        case "/language":
          this.setLanguageMenu(userInput);
          break;
        case "/start":
          if (!user) {
            this.setLanguageMenu(userInput);
            //—á–µ–∫–∞–µ–º –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          } else if (user) {
            console.log(user.username);
            FLAGKURS = false;
            FLAGCONTACTS = false;
            this.gotoPrivateChat(userInput);
          }
          break;
        default:
          this.KONTROL_PANEL_LANGUAGE(userInput, text);
          this.KONTROL_PANEL_MULTITUL(userInput); //–∫–æ–Ω—Ç—Ä–æ–ª–∫–∞ –Ω–∞ —è–∑—ã–∫–∏
          break;
      }
    });
    bot.onText(/.*/, (msg) => {
      const chatId = -1002111886632; // ID —á–∞—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const messagesToDelete = [
        "/contact@SuperKantorBot",
        "/start@SuperKantorBot",
        "/contact",
        "/start",
      ];
      const message = msg.text;
      const messageId = msg.message_id;

      if (chatId === msg.chat.id && messagesToDelete.includes(message)) {
        bot.deleteMessage(chatId, messageId).catch((error) => {
          console.error("Error deleting message:", error.response.body);
        });
      }
    });
  }
  KONTROL_PANEL_LANGUAGE(userInput, text) {
    const userId = userInput.from.id;
    const ALL_citiesJSON = questions.citiesLanguage;
    const citiesKeys = ALL_citiesJSON.flatMap((cityObj) =>
      Object.values(cityObj)
    );
    const usersBaseData = fs.readFileSync("usersBase.json");
    const usersBase = JSON.parse(usersBaseData);
    const user = usersBase.find((user) => user.userId === userId);
    // const userLanguage = user.language;
    switch (text) {
      case "üè≥Ô∏è –†—É—Å—Å–∫–∏–π":
        this.saveUser(userInput, "ru");
        this.gotoPrivateChat(userInput);
        break;
      case "üá∫üá∏ English":
        this.saveUser(userInput, "en");
        this.gotoPrivateChat(userInput);
        break;
      case "üáµüá± Polski":
        this.saveUser(userInput, "pl");
        this.gotoPrivateChat(userInput);
        break;
      case "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        this.saveUser(userInput, "ukr");
        this.gotoPrivateChat(userInput);
        break;

      default:
        break;
    }
  }
  KONTROL_PANEL_MULTITUL(userInput) {
    const usersBaseData = fs.readFileSync("usersBase.json");
    const text = userInput.text;
    const usersBase = JSON.parse(usersBaseData);
    const userId = userInput.from.id;
    const ALL_citiesJSON = questions.citiesLanguage;
    const citiesKeys = ALL_citiesJSON.flatMap((cityObj) =>
      Object.values(cityObj)
    );
    const user = usersBase.find((user) => user.userId === userId);
    const language = user.language;
    switch (text) {
      case text.match(/üí±/i) ? text : null:
        FLAGKURS = true;
        FLAGADDRESS = false;
        FLAGCONTACTS = false;
        this.selectCity(language, userInput);
        break;
      case text.match(/üì®/i) ? text : null:
        FLAGKURS = false;
        FLAGADDRESS = false;
        FLAGCONTACTS = true;
        this.selectCityForContact(language, userInput);
        break;
      case text.match(/üìç/i) ? text : null:
        FLAGKURS = false;
        FLAGCONTACTS = false;
        FLAGADDRESS = true;
        this.sendAddressMenu(language, userInput);
        break;
      case text.match(/üåê/i) ? text : null:
        FLAGKURS = false;
        FLAGCONTACTS = false;
        FLAGADDRESS = false;
        this.sendAboutInfo(language, userInput);
        break;
      case text.match(/üìà/i) ? text : null:
        FLAGKURS = false;
        FLAGCONTACTS = false;
        FLAGADDRESS = false;
        this.actualMultitul(language, userInput);
        break;
      case text.match(/üõ†Ô∏è/i) ? text : null:
        this.sendFeaturesMenu(language, userInput);
        break;
      case text.match(/‚Ü©Ô∏è/i) ? text : null:
        this.sendGeneralMenu(userInput, language);
        break;
      case text.match(/üìù/i) ? text : null:
        this.orderBotButton(userInput, language);
        break;
      default:
        if (citiesKeys.includes(text) && FLAGKURS === true) {
          this.currentCource(text, userId);
        }
        if (citiesKeys.includes(text) && FLAGCONTACTS === true) {
          this.sendContactsForUser(text, userId);
        }
        if (citiesKeys.includes(text) && FLAGADDRESS === true) {
          this.sendAddressMSG(text, userId, language);
        }
        //—Ç—É—Ç –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –∏–Ω—Ñ–æ —à–ª—è–ø—É
        break;
    }
  }
  setLanguageMenu(userInput) {
    const keyboard = [
      [{ text: "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" }],
      [{ text: "üá∫üá∏ English" }, { text: "üáµüá± Polski" }, { text: "üè≥Ô∏è –†—É—Å—Å–∫–∏–π" }],
    ];
    const chatId = userInput.chat.id;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot
      .sendMessage(chatId, "Choose a language:", {
        reply_markup: {
          keyboard: keyboard,
          resize_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
          one_time_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        },
      })
      .then(() => {
        console.log("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.");
      })
      .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
      });
  }
  orderBotButton(userInput, contact, language) {
    console.log(userInput);

    const chatId = userInput.chat.id;
    const cliptechChat = 299219486; // Chat ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const text = {
      en: "<b>Great!</b>\n\nI‚Äôm passing your contact to our manager. Please, wait ‚Äî someone will contact you shortly.",
      ru: "<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–ü–µ—Ä–µ–¥–∞—é –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ ‚Äî —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      pl: "<b>≈öwietnie!</b>\n\nPrzekazujƒô Pa≈Ñstwa kontakt do naszego mened≈ºera. Proszƒô, poczekajcie ‚Äî kto≈õ skontaktuje siƒô z Pa≈Ñstwem wkr√≥tce.",
      ukr: "<b>–ß—É–¥–æ–≤–æ!</b>\n\n–ü–µ—Ä–µ–¥–∞—é –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —á–µ–∫–∞–π—Ç–µ ‚Äî –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂—É—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
  };


    let textToDenis = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!";

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(chatId, text[language], {
        reply_markup: this.generalMenu(language),
        resize_keyboard: true,
        parse_mode: "HTML",
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
    setTimeout(() => {
        bot.sendContact(cliptechChat, contact.phone_number, contact.first_name, {
            last_name: contact.last_name, // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–º–∏–ª–∏—è
        })
        .then(() => {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            bot.sendMessage(cliptechChat, textToDenis);
        })
        .catch((err) => {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', err);
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ–π
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        });
    }, 1000);
}


  async gotoPrivateChat(userInput) {
    try {
      const chatId = userInput.chat.id;

      // –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = userInput.from.id;
      const usersBaseData = fs.readFileSync("usersBase.json");
      const usersBase = JSON.parse(usersBaseData);
      const user = usersBase.find((user) => user.userId === userId);

      if (!user) {
        this.setLanguageMenu(userInput);
      }

      const userLanguage = user.language;
      const questionsData = fs.readFileSync("questions.json");
      const questions = JSON.parse(questionsData);

      const startMessage = questions[userLanguage].start;
      const startMessageInBot = questions[userLanguage].startIn;
      if (userId === chatId) {
        await bot.sendMessage(userId, startMessageInBot, {
          reply_markup: this.generalMenu(userLanguage),
        });
      }
      if (userId !== chatId) {
        await bot.sendMessage(userId, startMessage, {
          // reply_markup: this.featuresMenu(userLanguage),
        });
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ gotoPrivateChat:", error);
    }
  }
  saveUser(userInput, languageCode) {
    try {
      const { first_name, last_name, username, id } = userInput.from;
      const userId = id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª JSON –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      let usersBase = [];
      const usersBaseFilePath = "usersBase.json";

      if (fs.existsSync(usersBaseFilePath)) {
        const usersBaseData = fs.readFileSync(usersBaseFilePath, "utf8");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç –ª–∏ —Ñ–∞–π–ª JSON
        if (usersBaseData.length > 0) {
          usersBase = JSON.parse(usersBaseData);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userId
      const existingUserIndex = usersBase.findIndex(
        (user) => user.userId === userId
      );
      if (existingUserIndex !== -1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = usersBase[existingUserIndex];
        const updatedUser = {
          username: username || first_name || last_name || "Unknown",
          userId,
          language: languageCode,
        };

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (
          existingUser.username !== updatedUser.username ||
          existingUser.language !== updatedUser.language
        ) {
          usersBase[existingUserIndex] = updatedUser;

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª JSON
          fs.writeFileSync(
            usersBaseFilePath,
            JSON.stringify(usersBase, null, 2)
          );
          console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
        } else {
          console.log("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤
        usersBase.push({
          username: username || first_name || last_name || "Unknown",
          userId,
          language: languageCode,
        });

        // –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON
        fs.writeFileSync(usersBaseFilePath, JSON.stringify(usersBase, null, 2));
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
  }
  generalMenu(language) {
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const featuresButton = "üõ†Ô∏è " + questions[language].featuresText[0];
    const ourResourcesText = "üåê " + questions[language].options[3];
    const orderBotButton = "üìù " + questions[language].orderButton[0];
    //
    return {
      keyboard: [
        [{ text: featuresButton }, { text: ourResourcesText }],
        [{ text: orderBotButton ,request_contact: true}],
      ],
      resize_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      one_time_keyboard: true,
    };
  }
  featuresMenu(language) {
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const kursText = "üí± " + questions[language].options[0];
    const contactText = "üì® " + questions[language].options[1];
    const actualText = "üìà " + questions[language].options[2];
    const addresses = "üìç " + questions[language].options[4];
    const calculator = "üßÆ " + questions[language].options[5];
    const page = "üì∞ " + questions[language].options[6];
    const back = "‚Ü©Ô∏è " + questions[language].options[7];
    return {
      keyboard: [
        [{ text: kursText }, { text: contactText }],
        [{ text: actualText }, { text: addresses }],
        [
          {
            text: calculator,
            web_app: {
              url: "https://widthdoctor.github.io/calculator_currency/calculator",
              request_write_access: true,
              // https://tiana.by/
              // https://widthdoctor.github.io/calculator_currency/calculator
            },
          },
          {
            text: page,
            web_app: {
              url: "https://www.gazeta.pl/0,0.html",
              request_write_access: true,
              // https://tiana.by/
              // https://widthdoctor.github.io/calculator_currency/calculator
            },
          },
        ],
        [{ text: back }],
      ],
      resize_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      one_time_keyboard: true,
    };
  }
  sendFeaturesMenu(language, userInput) {
    const chatId = userInput.chat.id;
    let text = {
      en: "<b>In this menu, you can explore the bot's features and learn how they work.</b>\n\nAll pricing elements are collected here to help you choose the functions that are best suited for your business. Feel free to click on anything ‚Äî everything is available for exploration!\n\n<b>To order the bot</b>\nsimply go to the main menu in the 'Our Resources' section (Instagram / Facebook) or contact us via the 'Order Bot' button.",
      ru: "<b>–í —ç—Ç–æ–º –º–µ–Ω—é —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç.</b>\n\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ü–µ–Ω–Ω–∏–∫–∞, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!\n\n<b>–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞</b>\n–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã' (Instagram / Facebook) –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞'.",
      pl: "<b>W tym menu mo≈ºesz zapoznaƒá siƒô z funkcjami bota i dowiedzieƒá siƒô, jak dzia≈ÇajƒÖ.</b>\n\nWszystkie elementy cenowe sƒÖ tutaj zebrane, aby pom√≥c Ci wybraƒá funkcje, kt√≥re najlepiej pasujƒÖ do Twojego biznesu. ≈ömia≈Ço klikaj na wszystko ‚Äî wszystko jest dostƒôpne do eksploracji!\n\n<b>Aby zam√≥wiƒá bota</b>\npo prostu przejd≈∫ do g≈Ç√≥wnego menu w sekcji 'Nasze zasoby' (Instagram / Facebook) lub skontaktuj siƒô z nami za pomocƒÖ przycisku 'Zam√≥w bota'.",
      ukr: "<b>–£ —Ü—å–æ–º—É –º–µ–Ω—é —Ç–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞ —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å.</b>\n\n–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ü—ñ–Ω–Ω–∏–∫–∞, —â–æ–± —Ç–∏ –º—ñ–≥ –≤–∏–±—Ä–∞—Ç–∏ —Å–∞–º–µ —Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è —Ç–≤–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É. –ù–µ —Å–æ—Ä–æ–º—Å—è –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Äî –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è!\n\n<b>–©–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ –±–æ—Ç–∞</b>\n–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —Ä–æ–∑–¥—ñ–ª '–ù–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏' (Instagram / Facebook) –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ó–∞–º–æ–≤–∏—Ç–∏ –±–æ—Ç–∞'.",
    };
    bot.sendMessage(chatId, text[language], {
      reply_markup: this.featuresMenu(language),
      resize_keyboard: true,
      parse_mode: "HTML",
    });
  }
  sendAddressMSG(text, userId, language) {
    switch (text) {
      case "Krakow":
      case "–ö—Ä–∞–∫–æ–≤":
      case "Krak√≥w":
      case "–ö—Ä–∞–∫—ñ–≤":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=ul.+D%C5%82uga+16,+31-146+Krak%C3%B3w'>ul. D≈Çuga 16, 31-146 Krak√≥w</a>\nüïò 9:00-20:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;

      case "Wroc≈Çaw":
      case "–í—Ä–æ—Ü–ª–∞–≤":
      case "Wroclaw":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=O%C5%82awska+24,+50-123+Wroc%C5%82aw/'>ul. O≈Çawska 24, 50-123 Wroc≈Çaw</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Przemysl":
      case "Przemy≈õl":
      case "–ü—à–µ–º—ã—Å–ª—å":
      case "–ü—à–µ–º–∏—à–ª—å":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=Plac+Na+Bramie+5,+37-700+Przemy≈õl/'>ul. Plac na bramie 5, 37-700 Przemy≈õl</a>\nüïò 8:00-18:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Gdansk":
      case "Gda≈Ñsk":
      case "–ì–¥–∞–Ω—å—Å–∫":
      case "–ì–¥–∞–Ω—Å—å–∫":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=Podwale+Staromiejskie+94,+80-844+Gda≈Ñsk/'>ul. Podwale Staromiejskie 94/95, 80-844 Gda≈Ñsk</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Lodz":
      case "≈Å√≥d≈∫":
      case "–õ–æ–¥–∑—å":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=ul.Piotrkowska+97+L.+UZ+3,+90-425+L√≥d≈∫/'>ul.Piotrkowska 97 L. UZ 3, 90-425 L√≥d≈∫</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Warszawa":
      case "–í–∞—Ä—à–∞–≤–∞":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=al.+Jerozolimskie+42,+00-042+Warszawa/'>Aleje Jerozolimskie 42, 00-042 Warszawa</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "KrakowPKP":
      case "Krak√≥w PKP":
      case "–ö—Ä–∞–∫–æ–≤ –ü–ö–ü":
      case "–ö—Ä–∞–∫—ñ–≤ –ü–ö–ü":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://www.google.com/maps/search/?api=1&query=ul.Pawia+5A,+31-154+Krak√≥w/'>ul.Pawia 5a (Lokal 23), 31-154 Krak√≥w</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Rzeszow":
      case "Rzesz√≥w":
      case "–ñ–µ—à—É–≤":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://maps.app.goo.gl/wXHnDweKBnkqpa5fA'>ul. ≈öwiƒôtego Miko≈Çaja 7, 35-005 Rzesz√≥w</a>\nüïò 8:00-20:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Poznan":
      case "Pozna≈Ñ":
      case "–ü–æ–∑–Ω–∞–Ω—å":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://maps.app.goo.gl/gMUcWtqfekznnd8c7'>ul. G≈Çogowska 51/2, 60-738 Pozna≈Ñ</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Lublin":
      case "–õ—é–±–ª–∏–Ω":
      case "–õ—é–±–ª—ñ–Ω":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://maps.app.goo.gl/Sb7yJuHtXfn1tVB96'>ul. 1 Maja 30, 20-410 Lublin</a>\nüïò 8:00-20:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;
      case "Szczecin":
      case "–©–µ—Ü–∏–Ω":
        bot.sendMessage(
          userId,
          "<b>Adres twojej firmy</b>\n \n<b>email</b> üì¨: biznesowyadres@gmail.com\n \nüìç <a href='https://maps.app.goo.gl/3Rq4hHXkRjq9Ms757'>ul. Edmunda Ba≈Çuki 20, 70-407 Szczecin</a>\nüïò 9:00-21:00",
          {
            reply_markup: this.featuresMenu(language),
            parse_mode: "HTML",
          }
        );
        break;

      default:
        break;
    }
  }
  sendCurrentRate(rate, userId, text) {
    const usersBaseData = fs.readFileSync("usersBase.json");
    const usersBase = JSON.parse(usersBaseData);
    const user = usersBase.find((user) => user.userId === userId);
    const language = user.language;

    const buttons = Object.entries(rate).map(([currency, rates]) => {
      let buttonLabel = "";
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã
      buttonLabel += this.getCountryEmoji(currency) + " " + currency;
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      if (rates.dk && rates.ds) {
        buttonLabel += ` ‚Äî    üíµ ${rates.dk} üí¥ ${rates.ds}`;
      }
      return [{ text: buttonLabel, callback_data: "kek" }];
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const actualCurseMsg = {
      ru: "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:",
      en: "Current exchange rate at the moment:",
      pl: "Aktualny kurs na chwilƒô obecnƒÖ:",
      ukr: "–ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç:",
    };
    bot.sendMessage(userId, actualCurseMsg[language], {
      reply_markup: JSON.stringify({ inline_keyboard: buttons }),
    });
    this.sendContactsForUser(text, userId);
    return JSON.stringify({ inline_keyboard: buttons });
  }
  sendContactsForUser(text, userId) {
    const usersBaseData = fs.readFileSync("usersBase.json");
    const usersBase = JSON.parse(usersBaseData);
    const user = usersBase.find((user) => user.userId === userId);
    const language = user.language;
    let phoneNumber;
    const contactName = {
      en: "Contact us",
      ru: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
      pl: "Skontaktuj siƒô z nami",
      ukr: "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏",
    };
    switch (text) {
      case "Krakow":
      case "–ö—Ä–∞–∫–æ–≤":
      case "Krak√≥w":
      case "–ö—Ä–∞–∫—ñ–≤":
        phoneNumber = "+48453323337"; // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        break;

      case "Wroc≈Çaw":
      case "–í—Ä–æ—Ü–ª–∞–≤":
      case "Wroclaw":
        phoneNumber = "+48453323337";
        break;
      case "Przemysl":
      case "Przemy≈õl":
      case "–ü—à–µ–º—ã—Å–ª—å":
      case "–ü—à–µ–º–∏—à–ª—å":
        phoneNumber = "+48453323337";
        break;
      case "Gdansk":
      case "Gda≈Ñsk":
      case "–ì–¥–∞–Ω—å—Å–∫":
      case "–ì–¥–∞–Ω—Å—å–∫":
        phoneNumber = "+48453323337";
        break;
      case "Lodz":
      case "≈Å√≥d≈∫":
      case "–õ–æ–¥–∑—å":
        phoneNumber = "+48453323337";
        break;
      case "Warszawa":
      case "–í–∞—Ä—à–∞–≤–∞":
        phoneNumber = "+48453323337";
        break;
      case "KrakowPKP":
      case "Krak√≥w PKP":
      case "–ö—Ä–∞–∫–æ–≤ –ü–ö–ü":
      case "–ö—Ä–∞–∫—ñ–≤ –ü–ö–ü":
        phoneNumber = "+48453323337";
        break;
      case "Rzeszow":
      case "Rzesz√≥w":
      case "–ñ–µ—à—É–≤":
        phoneNumber = "+48453323337";
        break;
      case "Poznan":
      case "Pozna≈Ñ":
      case "–ü–æ–∑–Ω–∞–Ω—å":
        phoneNumber = "+48453323337";
        break;
      case "Lublin":
      case "–õ—é–±–ª–∏–Ω":
      case "–õ—é–±–ª—ñ–Ω":
        phoneNumber = "+48453323337";
        break;
      case "Szczecin":
      case "–©–µ—Ü–∏–Ω":
        phoneNumber = "+48453323337";
        break;

      default:
        break;
    }
    const chatUrl = `https://t.me/${phoneNumber}`;

    const keyboard = {
      inline_keyboard: [[{ text: contactName[language], url: chatUrl }]],
      resize_keyboard: true, // –†–∞–∑—Ä–µ—à–∏—Ç—å –∫–Ω–æ–ø–∫–∞–º –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç–∫—Ä–∞–Ω—É
    };
    const managerText = {
      en: "Contact the manager",
      ru: "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
      pl: "Kontakt z mened≈ºerem",
      ukr: "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
    };
    setTimeout(() => {
      bot.sendMessage(userId, managerText[language], {
        reply_markup: JSON.stringify(keyboard),
        resize_keyboard: true,
      });
      this.whatelse(userId, language);
    }, 1000);
  }
  whatelse(userId, language) {
    let text = {
      en: "Shall we look at something else?",
      ru: "–ü–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ-—Ç–æ –µ—â–µ?",
      pl: "Zobaczymy co≈õ jeszcze?",
      ukr: "–ü–æ–¥–∏–≤–∏–º–æ—Å—å —â–µ —â–æ—Å—å?",
    };
    bot.sendMessage(userId, text[language], {
      reply_markup: this.featuresMenu(language),
      resize_keyboard: true,
    });
  }
  sendGeneralMenu(userInput, language) {
    const chatId = userInput.chat.id;
    let text = {
      en: "Anything else?",
      ru: "–ß—Ç–æ-—Ç–æ –µ—â–µ?",
      pl: "Co≈õ jeszcze?",
      ukr: "–©–æ—Å—å —â–µ?",
    };
    bot.sendMessage(chatId, text[language], {
      reply_markup: this.generalMenu(language),
      resize_keyboard: true,
    });
  }
  selectCity(userLanguage, userInput) {
    const chatId = userInput.chat.id;
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const messageCity = questions[userLanguage].city;
    const citiesData = questions.citiesLanguage;
    const cities = citiesData.flatMap((cityObj) => cityObj[userLanguage]);
    const buttons = cities.map((city) => ({
      text: city,
    }));
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–∞—Å—Å–∏–≤—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∫–Ω–æ–ø–æ–∫
    const inlineKeyboard = [];
    for (let i = 0; i < buttons.length; i += 3) {
      inlineKeyboard.push(buttons.slice(i, i + 3));
    }
    bot.sendMessage(chatId, messageCity, {
      reply_markup: {
        keyboard: inlineKeyboard,
        resize_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        one_time_keyboard: true,
      },
    });
  }
  selectCityForContact(userLanguage, userInput) {
    const chatId = userInput.chat.id;
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const messageCityContact = questions[userLanguage].contactQuestion;
    const citiesData = questions.citiesLanguage;
    const cities = citiesData.flatMap((cityObj) => cityObj[userLanguage]);
    const buttons = cities.map((city) => ({
      text: city,
    }));
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–∞—Å—Å–∏–≤—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∫–Ω–æ–ø–æ–∫
    const inlineKeyboard = [];
    for (let i = 0; i < buttons.length; i += 3) {
      inlineKeyboard.push(buttons.slice(i, i + 3));
    }
    bot.sendMessage(chatId, messageCityContact, {
      reply_markup: {
        keyboard: inlineKeyboard,
        resize_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        one_time_keyboard: true,
      },
    });
  }
  sendAddressMenu(userLanguage, userInput) {
    const chatId = userInput.chat.id;
    const questionsData = fs.readFileSync("questions.json");
    const questions = JSON.parse(questionsData);
    const messageCity = questions[userLanguage].city;
    const citiesData = questions.citiesLanguage;
    const cities = citiesData.flatMap((cityObj) => cityObj[userLanguage]);
    const buttons = cities.map((city) => ({
      text: city,
    }));
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–∞—Å—Å–∏–≤—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∫–Ω–æ–ø–æ–∫
    const inlineKeyboard = [];
    for (let i = 0; i < buttons.length; i += 3) {
      inlineKeyboard.push(buttons.slice(i, i + 3));
    }
    bot.sendMessage(chatId, messageCity, {
      reply_markup: {
        keyboard: inlineKeyboard,
        resize_keyboard: true, // –ú–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        one_time_keyboard: true,
      },
    });
  }
  getCountryEmoji(countryCode) {
    // –ü—Ä–∏–º–µ—Ä—ã —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–æ–≤
    const flagEmojis = {
      EUR: "üá™üá∫", // –ï–≤—Ä–æ
      USD: "üá∫üá∏", // –î–æ–ª–ª–∞—Ä –°–®–ê
      GBP: "üá¨üáß", // –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤
      CHF: "üá®üá≠", // –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫
      ILS: "üáÆüá±", // –ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —à–µ–∫–µ–ª—å
      CNY: "üá®üá≥", // –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å
      TRY: "üáπüá∑", // –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞
      CAD: "üá®üá¶", // –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä
      AUD: "üá¶üá∫", // –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä
      NOK: "üá≥üá¥", // –ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞
      SEK: "üá∏üá™", // –®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞
      CZK: "üá®üáø", // –ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞
      HUF: "üá≠üá∫", // –í–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä–∏–Ω—Ç
      HKD: "üá≠üá∞", // –ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä
      ISK: "üáÆüá∏", // –ò—Å–ª–∞–Ω–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞
      JPY: "üáØüáµ", // –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞
      AED: "üá¶üá™", // –î–∏—Ä—Ö–∞–º –û–ê–≠
      UAH: "üá∫üá¶", // –ì—Ä–∏–≤–Ω–∞ (–£–∫—Ä–∞–∏–Ω–∞)
      BGN: "üáßüá¨", // –õ–µ–≤ (–ë–æ–ª–≥–∞—Ä–∏—è)
      RON: "üá∑üá¥", // –õ–µ–π (–†—É–º—ã–Ω–∏—è)
      EUB: "üá™üá∫",
    };

    return flagEmojis[countryCode] || "";
  }
  sendAboutInfo(language, userInput) {
    const chatId = userInput.chat.id;
    const instagramIcon = "üì∑"; // –°–∏–º–≤–æ–ª, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ Instagram
    const facebookIcon = "üÖï"; // –°–∏–º–≤–æ–ª, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ Facebook

    const instagramUrl =
      "https://www.instagram.com/cliptech.inc/?igsh=MTEwdThwMXRycWgxbw%3D%3D&utm_source=qr"; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL Instagram
    const facebookUrl =
      "https://www.facebook.com/profile.php?id=61567262404118"; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL Facebook

    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: `${instagramIcon} Instagram`, url: instagramUrl },
            { text: `${facebookIcon} Facebook`, url: facebookUrl },
          ],
        ],
      },
    };
    let message = {
      en: "Our links to Instagram and Facebook:",
      ru: "–ù–∞—à–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Instagram –∏ Facebook:",
      pl: "Nasze linki do Instagrama i Facebooka:",
      ukr: "–ù–∞—à—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Instagram —Ç–∞ Facebook:"
    };
    bot.sendMessage(chatId, message[language], options);
    setTimeout(() => {
      this.sendGeneralMenu(userInput, language);
    }, 2000);
  }
  actualMultitul(language, userInput) {
    const chatId = userInput.chat.id;

    // –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    const translations = {
      pl: {
        news: {
          title: "Wiadomo≈õci",
          content:
            "Tutaj bƒôdƒÖ ≈õwie≈ºe wiadomo≈õci o Twoich produktach, wydarzeniach i ofertach. ≈öled≈∫ aktualizacje!",
        },
        prices: {
          title: "Ceny us≈Çug",
          content:
            "Wy≈õwietlaj aktualne ceny swoich us≈Çug, aby u≈ºytkownicy mogli szybko zapoznaƒá siƒô z cennikiem.",
        },
        promotions: {
          title: "Specjalne promocje",
          content:
            "Informuj klient√≥w o zni≈ºkach i promocjach, aby nie przegapili korzystnych ofert.",
        },
        faq: {
          title: "FAQ",
          content:
            "Podaj u≈ºytkownikom informacje na temat czƒôsto zadawanych pyta≈Ñ lub przydatne porady.",
        },
        initialMessage: "Wybierz sekcjƒô, aby dowiedzieƒá siƒô wiƒôcej:",
        backToMainMenu: "Do g≈Ç√≥wnego menu"
      },
      en: {
        news: {
          title: "News",
          content:
            "Here you will find fresh news about your products, events, and offers. Stay updated!",
        },
        prices: {
          title: "Service Prices",
          content:
            "Display the current prices of your services so users can quickly check the price list.",
        },
        promotions: {
          title: "Special Promotions",
          content:
            "Inform customers about discounts and promotions so they don't miss out on great deals.",
        },
        faq: {
          title: "FAQ",
          content:
            "Provide users with information about frequently asked questions or useful tips.",
        },
        initialMessage: "Choose a section to learn more:",
        backToMainMenu: "Back to main menu"
      },
      ru: {
        news: {
          title: "–ù–æ–≤–æ—Å—Ç–∏",
          content:
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Å–æ–±—ã—Ç–∏—è—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        },
        prices: {
          title: "–¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏",
          content:
            "–û—Ç–æ–±—Ä–∞–∂–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤–∞—à–∏ —É—Å–ª—É–≥–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–π—Å–æ–º.",
        },
        promotions: {
          title: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏",
          content:
            "–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —É–ø—É—Å—Ç–∏–ª–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
        },
        faq: {
          title: "FAQ",
          content:
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞—Ö.",
        },
        initialMessage: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
        backToMainMenu: "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
      },
      ukr: {
        news: {
          title: "–ù–æ–≤–∏–Ω–∏",
          content:
            "–¢—É—Ç –±—É–¥—É—Ç—å —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –≤–∞—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, –ø–æ–¥—ñ—ó —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!",
        },
        prices: {
          title: "–¶—ñ–Ω–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏",
          content:
            "–ü–æ–∫–∞–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –≤–∞—à—ñ –ø–æ—Å–ª—É–≥–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–≥–ª–∏ —à–≤–∏–¥–∫–æ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ø—Ä–∞–π—Å–æ–º.",
        },
        promotions: {
          title: "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó",
          content:
            "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –∞–∫—Ü—ñ—ó, —â–æ–± –≤–æ–Ω–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤–∏–≥—ñ–¥–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.",
        },
        faq: {
          title: "FAQ",
          content:
            "–ù–∞–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏.",
        },
        initialMessage: "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ:",
        backToMainMenu: "–í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
      }
    };

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const selectedLang = translations[language] || translations.pl; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å—Å–∫–∏–π

    const sections = {
      news: selectedLang.news,
      prices: selectedLang.prices,
      promotions: selectedLang.promotions,
      faq: selectedLang.faq,
    };

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const inlineKeyboard = [
      [
        { text: sections.news.title, callback_data: "toggle_news" },
        { text: sections.prices.title, callback_data: "toggle_prices" },
      ],
      [
        { text: sections.promotions.title, callback_data: "toggle_promotions" },
        { text: sections.faq.title, callback_data: "toggle_faq" },
      ],
      [{ text: selectedLang.backToMainMenu, callback_data: "go_to_main_menu" }],
    ];

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    let initialMessage = selectedLang.initialMessage;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot
      .sendMessage(chatId, initialMessage, {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      })
      .then((sentMessage) => {
        // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const sectionStates = {
          news: false,
          prices: false,
          promotions: false,
          faq: false,
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        const handleCallbackQuery = (query) => {
          const { data } = query;
          let responseMessage = initialMessage;

          // –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
          switch (data) {
            case "toggle_news":
              sectionStates.news = !sectionStates.news; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              responseMessage += sectionStates.news
                ? `\n\n${sections.news.content}`
                : "";
              break;
            case "toggle_prices":
              sectionStates.prices = !sectionStates.prices;
              responseMessage += sectionStates.prices
                ? `\n\n${sections.prices.content}`
                : "";
              break;
            case "toggle_promotions":
              sectionStates.promotions = !sectionStates.promotions;
              responseMessage += sectionStates.promotions
                ? `\n\n${sections.promotions.content}`
                : "";
              break;
            case "toggle_faq":
              sectionStates.faq = !sectionStates.faq;
              responseMessage += sectionStates.faq
                ? `\n\n${sections.faq.content}`
                : "";
              break;
            case "go_to_main_menu":
              // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
              bot.removeListener("callback_query", handleCallbackQuery);
              // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
              bot
                .deleteMessage(chatId, query.message.message_id)
                .then(() => {
                  // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                  this.whatelse(chatId, language);
                })
                .catch((err) => {
                  console.error("Error deleting message:", err);
                });
              return;
            default:
              break;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (responseMessage !== query.message.text) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot
              .editMessageText(responseMessage, {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                  inline_keyboard: inlineKeyboard,
                  resize_keyboard: true,
                  one_time_keyboard: false,
                },
              })
              .catch((err) => {
                console.error("Error editing message:", err);
              });
          }

          bot.answerCallbackQuery(query.id); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        bot.on("callback_query", handleCallbackQuery);
      });
  }

  calculateSum(sum, userId) {
    const usersBaseData = fs.readFileSync("usersBase.json");
    const usersBase = JSON.parse(usersBaseData);
    const user = usersBase.find((user) => user.userId === userId);
    const language = user.language;
    console.log(language);

    let rate = 3.905; // –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (kursToCalculate && kursToCalculate.USD && kursToCalculate.USD.ds) {
      rate = parseFloat(kursToCalculate.USD.ds);
      console.log(rate);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 2.6%
    const result = (sum / rate) * (1 - 0.026);
    let message = `${result.toFixed(0)} usdt`;
    let text = {
      en: `We calculated, it came out to ${message}. Just in case, check with the manager.`,
      ru: `–ú—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏, –≤—ã—à–ª–æ ${message}. –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É—Ç–æ—á–Ω–∏—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`,
      pl: `Policzyli≈õmy, wysz≈Ço ${message}. Na wszelki wypadek sprawd≈∫ to z mened≈ºerem.`,
      ukr: `–ú–∏ –ø–æ—Ä–∞—Ö—É–≤–∞–ª–∏, –≤–∏–π—à–ª–æ ${message}. –ü—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ —É—Ç–æ—á–Ω—ñ—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`,
    };
    console.log("–ö—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", rate);
    console.log("–ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –≤ –∑–ª–æ—Ç—ã—Ö:", sum);
    console.log("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—É–º–º–∞ –≤ USDT:", result.toFixed(0));
    bot.sendMessage(userId, text[language], {
      reply_markup: this.featuresMenu(language),
      resize_keyboard: true,
    });
  }
  firstNewsPaper(language) {
    const paymentInfo = {
      ru: "<b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π</b> üí≥\n–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–æ–æ–±—â–∞–µ–º –≤–∞–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ —Å –ø–æ–º–æ—â—å—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.\n–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—É:\n–ü–æ–ª—å—Å–∫–∞—è –∫–∞—Ä—Ç–∞ - 1,0% –æ—Ç –∫—É—Ä—Å–∞ –ø—Ä–æ–¥–∞–∂–∏\n–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ - 3,0% –æ—Ç –∫—É—Ä—Å–∞ –ø—Ä–æ–¥–∞–∂–∏\n(–õ–∏–º–∏—Ç –µ–¥–∏–Ω–∏—Ü —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π 1000)",
      en: "<b>Card Payment</b> üí≥\nDear Customers, we are pleased to inform you that you can now exchange your money using a debit/credit card.\nThis transaction will incur a minimum fee:\nPolish card - 1.0% to the selling rate\nForeign card - 3.0% to the selling rate\n(Transaction units limit 1000)",
      pl: "<b>P≈Çatno≈õƒá kartƒÖ</b> üí≥\nSzanowni Klienci, z przyjemno≈õciƒÖ informujemy, ≈ºe od teraz mo≈ºesz wymieniaƒá swoje pieniƒÖdze za pomocƒÖ karty p≈Çatniczej.\nTa transakcja bƒôdzie podlegaƒá minimalnej op≈Çacie:\nKarta polska - 1,0% do kursu sprzeda≈ºy\nKarta zagraniczna - 3,0% do kursu sprzeda≈ºy\n(Limit jednostek transakcji 1000)",
      ukr: "<b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é</b> üí≥\n–®–∞–Ω–æ–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏, –º–∏ —Ä–∞–¥—ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–∞–º, —â–æ —Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –æ–±–º—ñ–Ω—é–≤–∞—Ç–∏ —Å–≤–æ—ó –≥—Ä–æ—à—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏.\n–¶—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–º–∞–≥–∞—Ç–∏–º–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫–æ–º—ñ—Å—ñ—é:\n–ü–æ–ª—å—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞ - 1,0% –≤—ñ–¥ –∫—É—Ä—Å—É –ø—Ä–æ–¥–∞–∂—É\n–Ü–Ω–æ–∑–µ–º–Ω–∞ –∫–∞—Ä—Ç–∫–∞ - 3,0% –≤—ñ–¥ –∫—É—Ä—Å—É –ø—Ä–æ–¥–∞–∂—É\n(–û–±–º–µ–∂–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π 1000)",
    };
    return paymentInfo[language];
  }
}
const myBot = new NewBot(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
myBot.commands();
// myBot.cerrentCource();
